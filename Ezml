import tensorflow as tf
import numpy as np

x_data=np.random.rand(100).astype(np.float32)
y_data=x_data*0.1+0.3#所有数字乘0.1在加0.3
# print(x_data)
# print("------------------------------------------------------------------------------------------------")
# print(y_data)
# print("------------------------------------------------------------------------------------------------")
weights=tf.Variable(tf.random_uniform([1],-1.0,1.0))#生成1维的矩阵，随机-1.0到1.0
biases=tf.Variable(tf.zeros([1]))#生成一个1维矩阵的1
y=x_data*weights+biases#x*w+1

loss=tf.reduce_mean(tf.square(y_data-y))#tf.reduce_mean 求tensf平均值   tf.square  求平方
optimizer=tf.train.GradientDescentOptimizer(0.5)#每步大小
train=optimizer.minimize(loss)#minimize 使減到最少.使縮到最小.我們已採取措施盡量減少損失


init=tf.initialize_all_variables()#变量初始化
sess=tf.Session()#开始 开庭
sess.run(init)
print("_______________________________")
print(sess.run(loss))
print(sess.run(y))
print(weights)
# #test
# sad=tf.random_normal([2,3],mean =50)
#
# print(sess.run(sad))
# #random_nomal用法

for step in range(200):
    sess.run(train)
    if step%20==0:
        print(sess.run(loss))
        print(sess.run(weights),sess.run(biases))
    if step==0:
        print(sess.run(y))
    if step == 190:
        print(sess.run(y))
