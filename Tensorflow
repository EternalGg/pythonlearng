from __future__ import print_function
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

def add_layer(inputs, in_size, out_size, activation_function=None):
    # add one more layer and return the output of this layer
    print(inputs)
    Weights = tf.Variable(tf.random_normal([in_size, out_size]))#高斯分布
    biases = tf.Variable(tf.zeros([1, out_size]) + 0.1)#生成x个0.1
    Wx_plus_b = tf.matmul(inputs, Weights) + biases#
    if activation_function is None:
        outputs = Wx_plus_b
    else:
        outputs = activation_function(Wx_plus_b)
    print("-----------------------------------------------")
    print(outputs)
    # print(outputs[1][1])
    return outputs

# Make up some real data
x_data = np.linspace(-1,1,100)[:, np.newaxis]#-1到1分成[300][1]个
noise = np.random.normal(0, 0.05, x_data.shape)#0到0.05的高斯分布，[300][1]
y_data = np.square(x_data) - 0.5 + noise#平方放加noise

# define placeholder for inputs to network
xs = tf.placeholder(tf.float32, [None, 1])
ys = tf.placeholder(tf.float32, [None, 1])
# add hidden layer
l1 = add_layer(xs, 1, 10, activation_function=tf.nn.relu)#隐藏层
#weights=1-10的高斯分
#biases=10个0.1
#wex_plus_b=w+b
#return wex_plus减去负数
#shape=1，10的高斯分布+0.1，去掉负数变为0
# add output layer
prediction = add_layer(l1, 10, 1, activation_function=None)#定义输出层
#weights=[10,1]的高斯分布
#biases=[1,1]个0.1
#wex_plus_b=w+b
#return wex_plus减去负数
#shape=1，10的高斯分布+0.1，去掉负数变为0
# the error between prediction and real data

loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys - prediction),
                     reduction_indices = [ 1 ]))
train_step = tf.train.GradientDescentOptimizer(0.3).minimize(loss)

# important step
# tf.initialize_all_variables() no long valid from
# 2017-03-02 if using tensorflow >= 0.12
init = tf.global_variables_initializer()
# if int((tf.__version__).split('.')[1]) < 12:

# else:
#     init = tf.global_variables_initializer()
sess = tf.Session()
# writer = tf.summary.FileWriter("logs/", sess.graph)
# writer = tf.train.SummaryWriter('logs/', sess.graph)

sess.run(init)
fig = plt.Figure()
ax = fig.add_subplot(1,1,1)
plt.scatter(x_data,y_data)
plt.ion()
plt.show()


# print(y_data.mean())
sess.run(train_step, feed_dict={xs: x_data, ys: y_data})
for i in range(1000):
    # training
    sess.run(train_step, feed_dict={xs: x_data, ys: y_data})
    if i % 50 == 0:
        # # to see the step improvement
        print(sess.run(loss, feed_dict={xs: x_data, ys: y_data}))
        # # print(sess.run(train_step, feed_dict={xs: x_data, ys: y_data}))
        try:
            ax.lines.remove(lines[0])
        except Exception:
            pass
    prediction_value=sess.run(prediction,feed_dict={xs:x_data})
    lines=ax.plot(x_data,prediction_value,'r-',lw=5)
    plt.pause(0.1)
